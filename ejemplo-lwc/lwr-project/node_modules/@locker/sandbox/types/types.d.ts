import { SandboxKey, SandboxRecord as SandboxRecordBase, SandboxType } from '@locker/distortion/types';
import { Instrumentation } from '@locker/instrumentation/types';
import { Getter } from '@locker/shared/types';
import { GlobalObject } from '@locker/shared-dom/types';
export interface EvalHelpers {
    asyncToGen: (func: GeneratorFunction, thisArg: any, args: any[]) => Promise<any>;
    forAwaitOf: (index: number, stage: number, object?: object) => any;
    loadScript: (thisArg: any, url: string | URL) => Promise<any>;
    loadStyle: (thisArg: any, url: string | URL) => Promise<any>;
    makeRedGet: (...bindings: RedBindings) => RedBindings;
    makeRedResyncImports: (bindings: RedBindings) => () => RedBindings;
    namespace: <T>(object: T) => Readonly<T>;
    spreadable: <T extends any[]>(array: T) => T;
    super: (clazz: typeof Function, methodName: PropertyKey, thisArg: any, args: ArrayLike<any>) => any;
}
export interface EvaluateOptions extends SandboxRecordOptions {
    source: Function | string;
    sourceType: SourceType;
}
export declare type RedBindings = Getter[];
export interface SandboxRecord extends SandboxRecordBase {
    helpers: EvalHelpers;
    top: SandboxRecord;
    type: SandboxType;
    virtualEnvironmentEvaluator: VirtualEnvironmentEvaluator;
}
export interface SandboxRecordOptions {
    context?: any;
    document: Document;
    endowments?: object;
    globalObject: GlobalObject;
    instrumentation: Instrumentation;
    key: SandboxKey;
    opaque?: boolean;
    type: SandboxType;
    verboseInstrumentation: boolean;
}
export declare type SandboxRegistry = Record<SandboxKey, SandboxRecord>;
export declare const enum SourceType {
    Script = 0,
    Module = 1
}
export declare type VirtualEnvironmentEvaluator = (sourceText: string) => any;
//# sourceMappingURL=types.d.ts.map