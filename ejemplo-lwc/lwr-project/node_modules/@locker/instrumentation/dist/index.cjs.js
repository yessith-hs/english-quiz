/*!
 * Copyright (C) 2021 salesforce.com, inc.
 */
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var shared$LWS = require('@locker/shared');
/* eslint-disable class-methods-use-this, max-classes-per-file */


let ticketSequence$LWS = 0;

function getActivityId$LWS() {
  ticketSequence$LWS += 1;
  return shared$LWS.DateNow() + ticketSequence$LWS;
} // Locker Instrumentation Activity class

/* eslint no-underscore-dangle: ['error',{allowAfterThis:true}] */


class LockerActivity$LWS {
  constructor(activityName$LWS, startCallback$LWS, stopCallback$LWS, captureTimestamps$LWS = false) {
    this._activityStart = 0;
    this._activityStop = 0;
    this._captureTimestamps = captureTimestamps$LWS;
    this._startCallback = startCallback$LWS;
    this._started = false;
    this._stopCallback = stopCallback$LWS;
    this._stopped = false;
    this.activityId = `${activityName$LWS}-${getActivityId$LWS()}`;
    this.activityName = activityName$LWS;
  }
  /*
   * starts an activity
   */


  start(data$LWS) {
    if (!this._started) {
      this._started = true;

      if (this._captureTimestamps) {
        this._activityStart = shared$LWS.getTimestamp();
      }

      if (typeof this._startCallback === 'function') {
        this._startCallback(this, data$LWS);
      }
    }
  }
  /*
   * stops the current activity
   */


  stop(data$LWS) {
    if (!this._stopped) {
      this._stopped = true;

      if (this._captureTimestamps) {
        this._activityStop = shared$LWS.getTimestamp();
      }

      if (typeof this._stopCallback === 'function') {
        this._stopCallback(this, data$LWS);
      }
    }
  }
  /*
   * stop the current activity with error state.
   */


  error(data$LWS) {
    // @TODO:
    // Aura's metrics service ($A.metricsService) is the current
    // instrumentation service used by Locker. The metrics service does not
    // have an `error` API for perf activities. But O11y provides this
    // feature. When Locker is able to integrate O11y, the following line
    // should be calling O11y's error API instead of `stop()`.
    this.stop(data$LWS);
  }

  get duration() {
    return this._activityStop > this._activityStart ? this._activityStop - this._activityStart : 0;
  }

} // Creates a new no-op Instrumentation instance.


class DefaultInstrumentation$LWS {
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  startActivity(activityName$LWS, _data$LWS) {
    return new LockerActivity$LWS(activityName$LWS, undefined, undefined);
  } // eslint-disable-next-line @typescript-eslint/no-unused-vars


  log(_data$LWS) {} // eslint-disable-next-line @typescript-eslint/no-unused-vars


  error(_data$LWS) {}

} // Export the default instrumentation instance with no-op operations.


const defaultInstrumentation$LWS = new DefaultInstrumentation$LWS();
exports.DefaultInstrumentation = DefaultInstrumentation$LWS;
exports.LockerActivity = LockerActivity$LWS;
exports.defaultInstrumentation = defaultInstrumentation$LWS;
/*! version: 0.16.27 */
