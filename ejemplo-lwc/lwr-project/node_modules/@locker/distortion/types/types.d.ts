import { DataType, Instrumentation } from '@locker/instrumentation/types';
import { SandboxRecord as SandboxRecordBase } from '@locker/shared-dom/types';
export declare const enum CookieSameSite {
    'strict' = 0,
    'lax' = 1,
    'none' = 2
}
export declare type CookieListItem = {
    name: string;
    value: string;
    domain?: string;
    path: string;
    expires?: number;
    secure: boolean;
    sameSite: CookieSameSite;
};
export declare type Distortion = (...arg: any) => any;
export declare type DistortionFactory = (record: SandboxRecord) => DistortionMapPair;
export declare type DistortionsMap = WeakMap<ProxyTarget, Distortion>;
export declare type DistortionMapEntry = [RawValue, Distortion];
export declare type DistortionMapPair = DistortionMapEntry | null;
export declare type DistortionMapEntries = DistortionMapEntry[];
export declare type NodeNameMapSetNamedItem = (attr: Attr) => Attr | null;
export declare type ProxyTarget = CallableFunction | any[] | object;
export declare type RawValue = any;
export declare type SandboxKey = string;
export interface SandboxRecord extends SandboxRecordBase {
    BASIC_INSTRUMENTATION_DATA: DataType;
    distortions: DistortionsMap;
    instrumentation: Instrumentation;
    key: SandboxKey;
    top: SandboxRecord;
}
export declare const enum SandboxType {
    External = 0,
    Internal = 1
}
export interface StorageMeta {
    proxy: Storage;
    storage: Storage;
    storageRootKey: string;
}
//# sourceMappingURL=types.d.ts.map