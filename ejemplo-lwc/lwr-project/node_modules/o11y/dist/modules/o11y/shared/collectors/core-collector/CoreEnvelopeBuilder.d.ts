import { BucketMetric, Metric } from '../../interfaces';
import { CoreEnvelope } from './interfaces/CoreEnvelope';
import { LogMessage } from './interfaces/LogMessage';
import { StaticAttributes } from './interfaces/StaticAttributes';
import { BucketHistogram } from '../metrics/BucketHistogram';
import { UpCounter } from '../metrics/UpCounter';
import { ValueRecorder } from '../metrics/ValueRecorder';
export declare const coreEnvelopeKey = "o11y";
export declare class CoreEnvelopeBuilder {
    private _envelope;
    constructor();
    withStaticAttributes(staticAttributes: StaticAttributes): CoreEnvelopeBuilder;
    withLogs(schemaName: string, logs: LogMessage[]): CoreEnvelopeBuilder;
    private static _getMetricTags;
    static getUpCounters(metrics: Metric<number>[], reset?: boolean): UpCounter[];
    static getValueRecorders(metrics: Metric<number[]>[], reset?: boolean): ValueRecorder[];
    static getBucketHistograms(metrics: BucketMetric<number[]>[], reset?: boolean): BucketHistogram[];
    withUpCounters(upCounters: UpCounter[]): CoreEnvelopeBuilder;
    withValueRecorders(valueRecorders: ValueRecorder[]): CoreEnvelopeBuilder;
    withBucketHistograms(bucketHistograms: BucketHistogram[]): CoreEnvelopeBuilder;
    build(): CoreEnvelope;
}
