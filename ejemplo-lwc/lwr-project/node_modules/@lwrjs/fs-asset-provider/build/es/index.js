import fs from 'fs';
import { extname } from 'path';
import { mimeLookup } from '@lwrjs/shared-utils';
import { setupWatcher } from '@lwrjs/shared-utils';
function hash(filePath) {
    const result = fs.statSync(filePath);
    return (result.mtimeMs * 10000).toString();
}
export default class FsAssetProvider {
    constructor(pluginConfig, providerConfig) {
        this.name = 'fs-asset-provider';
        this.cachedAssets = new Map();
        const { appEmitter, runtimeEnvironment: { watchFiles }, } = providerConfig;
        this.emitter = appEmitter;
        if (watchFiles) {
            this.watcher = setupWatcher(this.onModuleChange.bind(this));
        }
    }
    async onModuleChange(fileChanged) {
        let cachedAsset = this.cachedAssets.get(fileChanged);
        if (!cachedAsset) {
            throw new Error('We are observing a file we have not yet processed, this shouldnt happen...');
        }
        // Update the cache entry
        this.cachedAssets.delete(fileChanged);
        cachedAsset = await this.getAsset(fileChanged);
        this.emitter.notifyAssetSourceChanged(cachedAsset);
    }
    // -- Public API --------------------------------------------------------------------
    async initialize() {
        return;
    }
    async getAsset(fullAssetPath) {
        fullAssetPath = decodeURI(fullAssetPath); // decodeURIComponent decodes too many things (eg: /)
        if (!this.cachedAssets.has(fullAssetPath)) {
            const [assetPath] = fullAssetPath.split('?'); // remove query params
            // Clever normalization to avoid corner cases
            const ext = extname(`x.${assetPath}`).toLowerCase().substr(1);
            if (ext && fs.existsSync(assetPath)) {
                const ownHash = hash(assetPath);
                const assetDef = {
                    entry: assetPath,
                    ext: ext,
                    mime: mimeLookup(assetPath),
                    ownHash,
                    content: (encoding) => fs.readFileSync(assetPath, encoding),
                };
                this.cachedAssets.set(fullAssetPath, assetDef);
                if (this.watcher) {
                    this.watcher.add(assetPath);
                }
            }
        }
        return this.cachedAssets.get(fullAssetPath);
    }
}
//# sourceMappingURL=index.js.map