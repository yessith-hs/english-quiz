import { join } from 'path';
import { createStringBuilder } from '@lwrjs/shared-utils';
export function getUriFromAsset(asset, runtimeEnvironment) {
    const { apiVersion, immutableAssets, basePath } = runtimeEnvironment;
    const { type, ownHash, uri: assetUri, entry } = asset;
    const immutable = immutableAssets ? 'immutable/' : '';
    const hash = immutableAssets ? ownHash : 'latest';
    const uri = join(`${basePath}/${apiVersion}/${type}/${immutable}s/${hash}`, encodeURI(assetUri));
    return {
        uri,
        entry,
        immutable: immutableAssets,
    };
}
export async function linkAsset(source, assetSource, runtimeEnvironment, resolveUri) {
    const assetReferences = assetSource.metadata?.assetReferences;
    if (Buffer.isBuffer(source) || !assetReferences || assetReferences.length === 0) {
        return source;
    }
    const codeStringBuilder = createStringBuilder(source);
    for (const assetRef of assetReferences) {
        const { url, location: { startOffset, endOffset }, } = assetRef;
        // eslint-disable-next-line no-await-in-loop
        const assetUri = await resolveUri({ specifier: url }, runtimeEnvironment);
        const overrideUrl = assetUri.uri;
        codeStringBuilder.overwrite(startOffset, endOffset, overrideUrl || url);
    }
    return codeStringBuilder.toString();
}
//# sourceMappingURL=asset-linker.js.map