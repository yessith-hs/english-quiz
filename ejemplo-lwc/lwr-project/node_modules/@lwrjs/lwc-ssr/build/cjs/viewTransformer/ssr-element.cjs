var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/lwc-ssr/src/viewTransformer/ssr-element.ts
__markAsModule(exports);
__export(exports, {
  ssrElement: () => ssrElement
});
var import_amd_utils = __toModule(require("./amd-utils.cjs"));
var import_sandbox = __toModule(require("./sandbox.cjs"));
var bundleConfigOverrides = {
  exclude: [],
  alias: {
    lwc: "@lwc/engine-server"
  }
};
async function ssrElement({specifier, props: templateProps}, moduleBundler, {runtimeEnvironment, runtimeParams}) {
  const {
    bundleRecord,
    code,
    specifier: bundleSpecifier,
    version
  } = await moduleBundler.getModuleBundle({specifier}, {...runtimeEnvironment, bundle: false}, void 0, bundleConfigOverrides);
  const context = {
    props: templateProps,
    params: runtimeParams.params || {},
    query: runtimeParams.query || {},
    locale: runtimeParams.locale || runtimeEnvironment.defaultLocale
  };
  const {error, result, props} = runtimeEnvironment.format === "amd" ? await (0, import_sandbox.default)([
    ...await (0, import_amd_utils.default)(runtimeEnvironment, version.replace(/\./g, "_"), bundleRecord.includedModules.find((m) => m.startsWith("lwc/v")), bundleSpecifier),
    code
  ], context) : await (0, import_sandbox.default)([code], context);
  if (error) {
    throw new Error(error);
  } else {
    return {html: result, props};
  }
}
