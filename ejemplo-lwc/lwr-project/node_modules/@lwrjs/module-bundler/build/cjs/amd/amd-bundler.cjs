var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/module-bundler/src/amd/amd-bundler.ts
__markAsModule(exports);
__export(exports, {
  amdBundler: () => amdBundler
});
var import_shared_utils = __toModule(require("@lwrjs/shared-utils"));
async function amdBundler(moduleId, moduleRegistry, runtimeEnvironment, runtimeParams = {}, {bundleConfig, amdLoader}, bundleConfigOverride) {
  const {exclude, external} = bundleConfigOverride ?? bundleConfig;
  const requiredImports = new Map();
  const dynamicImports = new Map();
  const visited = new Map();
  const moduleGraphs = await (0, import_shared_utils.getModuleGraphs)(moduleId.specifier, {
    includeLinkedDefinitions: true,
    depth: {
      static: import_shared_utils.GraphDepth.ALL,
      dynamic: 0,
      includeId: (moduleRef) => {
        if (exclude && exclude.includes(moduleRef.specifier) || moduleRef.specifier === amdLoader) {
          requiredImports.set(`${moduleId.specifier}_${moduleId.version}`, moduleRef);
          return false;
        }
        return true;
      }
    }
  }, moduleRegistry, moduleRegistry, runtimeEnvironment, runtimeParams, visited);
  const rootModule = moduleGraphs.graphs[0];
  const rootModuleDef = moduleGraphs.linkedDefinitions[rootModule.specifier];
  const {id, name, namespace, version, specifier} = rootModuleDef;
  rootModuleDef?.linkedModuleRecord.dynamicImports?.forEach((e) => {
    dynamicImports.set(`${e.specifier}_${e.version}`, e);
  });
  moduleGraphs.graphs[0].static.forEach((m) => {
    const d = moduleGraphs.linkedDefinitions[m];
    d?.linkedModuleRecord.dynamicImports?.forEach((e) => {
      dynamicImports.set(`${e.specifier}_${e.version}`, e);
    });
  });
  const code = [];
  const moduleSpecifiers = [];
  for (let i = rootModule.static.length - 1; i >= 0; i--) {
    const s = rootModule.static[i];
    if (moduleGraphs.linkedDefinitions[s]) {
      moduleSpecifiers.push(s);
      code.push(moduleGraphs.linkedDefinitions[s].linkedSource.trimEnd());
    }
  }
  code.push(rootModuleDef.linkedSource.trimEnd());
  return {
    id,
    name,
    namespace,
    version,
    specifier,
    code: code.join(""),
    config: {external, exclude},
    bundleRecord: {
      imports: Array.from(requiredImports.values()),
      dynamicImports: Array.from(dynamicImports.values()),
      includedModules: moduleSpecifiers
    }
  };
}
